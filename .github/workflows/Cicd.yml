name: CICD Pipeline for Python Application using github actions. 

on:
  push:
    branches: [ "main" ]
jobs:
  build: 
    runs-on: self-hosted

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        
    - name: Clean up Python junk and caches
      run: |
          find . -type d -name "__pycache__" -exec rm -rf {} +
          rm -rf .pytest_cache .mypy_cache *.egg-info dist build
    - name: Clear Trivy cache
      run: |
           rm -rf ~/.cache/trivy
       
    - name: Show disk space
      run: df -h
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        #pip install flake8 pytest
        #if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pwd
        pip install -r requirements.txt
    - name: Install Trivy
      #shell: bash
      run: |
            sudo DEBIAN_FRONTEND=noninteractive apt-get install wget -y apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo DEBIAN_FRONTEND=noninteractive apt-get update -y
            sudo DEBIAN_FRONTEND=noninteractive apt-get install trivy -y
    - name: Trivy Scan
     # run: trivy fs . 
      run: |
          trivy fs --exit-code 0 --severity HIGH,CRITICAL --format table --output trivy-report.txt .
          
    - name: Sonarqube Integration
      uses: SonarSource/sonarqube-scan-action@v5
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #- name: Trivy Report Upload
    #  uses: actions/upload-artifact@v4
    #  with:
    #   name: trivy-report
    #   path: trivy-report.txt

  Test:
    runs-on: self-hosted
    needs: build
    steps:
    - name: Test
      run: python3 app.py
  DockerPush:
    runs-on: self-hosted
    needs: Test
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: jm2501/app:latest
    
